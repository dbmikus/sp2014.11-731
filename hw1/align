#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
from ibm_model1 import ibm_model1

optparser = optparse.OptionParser()
optparser.add_option("-b", "--bitext", dest="bitext", default="data/dev-test-train.de-en", help="Parallel corpus (default data/dev-test-train.de-en)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()

# sys.stderr.write("Training with Dice's coefficient...")
sys.stderr.write("Training with IBM Model 1...")

def make_bitext(unformatted, num_sents):
    all_lower = True
    truncate_size = 7
    # If true, replace every digit with "#"
    simple_numbers = True

    def replace_digits(word):
        new_word = ''
        for c in word:
            if c.isdigit():
                c = '#'
            new_word += c
        return new_word

    def process_sentence(sentence):
        if all_lower:
            sentence = sentence.lower()

        split_up = sentence.strip().split()

        if truncate_size > 0:
            split_up = [word[:truncate_size] for word in split_up]

        if simple_numbers:
            split_up = [replace_digits(word) for word in split_up]

        return split_up

    def process_pair(pair):
        return [process_sentence(sentence) for sentence in pair.split(' ||| ')]

    bitext = [process_pair(pair) for pair in open(opts.bitext)]

    # Truncate the number of sentences we return based on the number we requested
    return bitext[:opts.num_sents]

def dice(bitext):
    # a mapping from source words to their count
    f_count = defaultdict(int)
    # a mapping from target words to their count
    e_count = defaultdict(int)
    # A mapping from pairs of source and target words to the count of that pair.
    # This counts something as a pair if both appear in a given (f,e) sentence pair.
    fe_count = defaultdict(int)
    for (n, (f, e)) in enumerate(bitext):
      for f_i in set(f):
        f_count[f_i] += 1
        for e_j in set(e):
          fe_count[(f_i,e_j)] += 1
      for e_j in set(e):
        e_count[e_j] += 1
      if n % 500 == 0:
        sys.stderr.write(".")

    dice = defaultdict(int)
    for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
      dice[(f_i,e_j)] = 2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j])
      if k % 5000 == 0:
        sys.stderr.write(".")
    sys.stderr.write("\n")

    for (f, e) in bitext:
      for (i, f_i) in enumerate(f):
        for (j, e_j) in enumerate(e):
          if dice[(f_i,e_j)] >= opts.threshold:
            sys.stdout.write("%i-%i " % (i,j))
      sys.stdout.write("\n")


# dice(bitext)
bitext = make_bitext(opts.bitext, opts.num_sents)
sys.stdout.write(ibm_model1(bitext, 5))
